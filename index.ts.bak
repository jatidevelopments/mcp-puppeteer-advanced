#!/usr/bin/env node

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
    CallToolRequestSchema,
    ListResourcesRequestSchema,
    ListToolsRequestSchema,
    ReadResourceRequestSchema,
    CallToolResult,
    TextContent,
    ImageContent,
    Tool,
} from "@modelcontextprotocol/sdk/types.js";
import puppeteer, { Browser, Page } from "puppeteer";
import * as fs from 'fs';
import * as path from 'path';
import * as https from 'https';
import * as http from 'http';
import * as url from 'url';

// Define the tools once to avoid repetition
const TOOLS: Tool[] = [
    {
        name: "puppeteer_navigate",
        description: "Navigate to a URL",
        inputSchema: {
            type: "object",
            properties: {
                url: { type: "string", description: "URL to navigate to" },
                launchOptions: { type: "object", description: "PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts. Example: { headless: true, args: ['--no-sandbox'] }" },
                allowDangerous: { type: "boolean", description: "Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox will throw errors. Default false." },
            },
            required: ["url"],
        },
    },
    {
        name: "puppeteer_screenshot",
        description: "Take a screenshot of the current page or a specific element",
        inputSchema: {
            type: "object",
            properties: {
                name: { type: "string", description: "Name for the screenshot" },
                selector: { type: "string", description: "CSS selector for element to screenshot" },
                width: { type: "number", description: "Width in pixels (default: 800)" },
                height: { type: "number", description: "Height in pixels (default: 600)" },
            },
            required: ["name"],
        },
    },
    {
        name: "puppeteer_click",
        description: "Click an element on the page",
        inputSchema: {
            type: "object",
            properties: {
                selector: { type: "string", description: "CSS selector for element to click" },
            },
            required: ["selector"],
        },
    },
    {
        name: "puppeteer_fill",
        description: "Fill out an input field",
        inputSchema: {
            type: "object",
            properties: {
                selector: { type: "string", description: "CSS selector for input field" },
                value: { type: "string", description: "Value to fill" },
            },
            required: ["selector", "value"],
        },
    },
    {
        name: "puppeteer_select",
        description: "Select an element on the page with Select tag",
        inputSchema: {
            type: "object",
            properties: {
                selector: { type: "string", description: "CSS selector for element to select" },
                value: { type: "string", description: "Value to select" },
            },
            required: ["selector", "value"],
        },
    },
    {
        name: "puppeteer_hover",
        description: "Hover an element on the page",
        inputSchema: {
            type: "object",
            properties: {
                selector: { type: "string", description: "CSS selector for element to hover" },
            },
            required: ["selector"],
        },
    },
    {
        name: "puppeteer_evaluate",
        description: "Execute JavaScript in the browser console",
        inputSchema: {
            type: "object",
            properties: {
                script: { type: "string", description: "JavaScript code to execute" },
            },
            required: ["script"],
        },
    },
    {
        name: "puppeteer_extract_images",
        description: "Extract all images from the page (both <img> tags and CSS background images)",
        inputSchema: {
            type: "object",
            properties: {
                selector: { type: "string", description: "Optional CSS selector to limit image extraction to a specific part of the page" },
                includeBackgroundImages: { type: "boolean", description: "Whether to include CSS background images (default: true)" },
            },
            required: [],
        },
    },
    {
        name: "puppeteer_download_images",
        description: "Download images to a specified folder",
        inputSchema: {
            type: "object",
            properties: {
                imageUrls: {
                    type: "array",
                    description: "Array of image URLs to download",
                    items: { type: "string" }
                },
                outputFolder: { type: "string", description: "Folder path where images should be saved (default: ./downloaded_images)" },
                namePrefix: { type: "string", description: "Optional prefix for downloaded image filenames" },
            },
            required: ["imageUrls"],
        },
    },
];

// Global state
let browser: Browser | null;
let page: Page | null;
const consoleLogs: string[] = [];
const screenshots = new Map<string, string>();
const extractedImages: { url: string, sourceType: string, alt?: string }[] = [];
let previousLaunchOptions: any = null;

async function ensureBrowser({ launchOptions, allowDangerous }: any) {

    const DANGEROUS_ARGS = [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--single-process',
        '--disable-web-security',
        '--ignore-certificate-errors',
        '--disable-features=IsolateOrigins',
        '--disable-site-isolation-trials',
        '--allow-running-insecure-content'
    ];

    // Parse environment config safely
    let envConfig = {};
    try {
        envConfig = JSON.parse(process.env.PUPPETEER_LAUNCH_OPTIONS || '{}');
    } catch (error: any) {
        console.warn('Failed to parse PUPPETEER_LAUNCH_OPTIONS:', error?.message || error);
    }

    // Deep merge environment config with user-provided options
    const mergedConfig = deepMerge(envConfig, launchOptions || {});

    // Security validation for merged config
    if (mergedConfig?.args) {
        const dangerousArgs = mergedConfig.args?.filter?.((arg: string) => DANGEROUS_ARGS.some((dangerousArg: string) => arg.startsWith(dangerousArg)));
        if (dangerousArgs?.length > 0 && !(allowDangerous || (process.env.ALLOW_DANGEROUS === 'true'))) {
            throw new Error(`Dangerous browser arguments detected: ${dangerousArgs.join(', ')}. Fround from environment variable and tool call argument. ` +
                'Set allowDangerous: true in the tool call arguments to override.');
        }
    }

    try {
        if ((browser && !browser.connected) ||
            (launchOptions && (JSON.stringify(launchOptions) != JSON.stringify(previousLaunchOptions)))) {
            await browser?.close();
            browser = null;
        }
    }
    catch (error) {
        browser = null;
    }

    previousLaunchOptions = launchOptions;

    if (!browser) {
        const npx_args = { headless: false }
        const docker_args = { headless: true, args: ["--no-sandbox", "--single-process", "--no-zygote"] }
        browser = await puppeteer.launch(deepMerge(
            process.env.DOCKER_CONTAINER ? docker_args : npx_args,
            mergedConfig
        ));
        const pages = await browser.pages();
        page = pages[0];

        page.on("console", (msg) => {
            const logEntry = `[${msg.type()}] ${msg.text()}`;
            consoleLogs.push(logEntry);
            server.notification({
                method: "notifications/resources/updated",
                params: { uri: "console://logs" },
            });
        });
    }
    return page!;
}

// Deep merge utility function
function deepMerge(target: any, source: any): any {
    const output = Object.assign({}, target);
    if (typeof target !== 'object' || typeof source !== 'object') return source;

    for (const key of Object.keys(source)) {
        const targetVal = target[key];
        const sourceVal = source[key];
        if (Array.isArray(targetVal) && Array.isArray(sourceVal)) {
            // Deduplicate args/ignoreDefaultArgs, prefer source values
            output[key] = [...new Set([
                ...(key === 'args' || key === 'ignoreDefaultArgs' ?
                    targetVal.filter((arg: string) => !sourceVal.some((launchArg: string) => arg.startsWith('--') && launchArg.startsWith(arg.split('=')[0]))) :
                    targetVal),
                ...sourceVal
            ])];
        } else if (sourceVal instanceof Object && key in target) {
            output[key] = deepMerge(targetVal, sourceVal);
        } else {
            output[key] = sourceVal;
        }
    }
    return output;
}

declare global {
    interface Window {
        mcpHelper: {
            logs: string[],
            originalConsole: Partial<typeof console>,
        }
    }
}

async function handleToolCall(name: string, args: any): Promise<CallToolResult> {
    const page = await ensureBrowser(args);

    switch (name) {
        case "puppeteer_navigate":
            await page.goto(args.url);
            return {
                content: [{
                    type: "text",
                    text: `Navigated to ${args.url}`,
                }],
                isError: false,
            };

        case "puppeteer_screenshot": {
            const width = args.width ?? 800;
            const height = args.height ?? 600;
            await page.setViewport({ width, height });

            const screenshot = await (args.selector ?
                (await page.$(args.selector))?.screenshot({ encoding: "base64" }) :
                page.screenshot({ encoding: "base64", fullPage: false }));

            if (!screenshot) {
                return {
                    content: [{
                        type: "text",
                        text: args.selector ? `Element not found: ${args.selector}` : "Screenshot failed",
                    }],
                    isError: true,
                };
            }

            screenshots.set(args.name, screenshot as string);
            server.notification({
                method: "notifications/resources/list_changed",
            });

            return {
                content: [
                    {
                        type: "text",
                        text: `Screenshot '${args.name}' taken at ${width}x${height}`,
                    } as TextContent,
                    {
                        type: "image",
                        data: screenshot,
                        mimeType: "image/png",
                    } as ImageContent,
                ],
                isError: false,
            };
        }

        case "puppeteer_click":
            try {
                await page.click(args.selector);
                return {
                    content: [{
                        type: "text",
                        text: `Clicked: ${args.selector}`,
                    }],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Failed to click ${args.selector}: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }

        case "puppeteer_fill":
            try {
                await page.waitForSelector(args.selector);
                await page.type(args.selector, args.value);
                return {
                    content: [{
                        type: "text",
                        text: `Filled ${args.selector} with: ${args.value}`,
                    }],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Failed to fill ${args.selector}: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }

        case "puppeteer_select":
            try {
                await page.waitForSelector(args.selector);
                await page.select(args.selector, args.value);
                return {
                    content: [{
                        type: "text",
                        text: `Selected ${args.selector} with: ${args.value}`,
                    }],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Failed to select ${args.selector}: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }

        case "puppeteer_hover":
            try {
                await page.waitForSelector(args.selector);
                await page.hover(args.selector);
                return {
                    content: [{
                        type: "text",
                        text: `Hovered ${args.selector}`,
                    }],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Failed to hover ${args.selector}: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }

        case "puppeteer_evaluate":
            try {
                await page.evaluate(() => {
                    window.mcpHelper = {
                        logs: [],
                        originalConsole: { ...console },
                    };

                    ['log', 'info', 'warn', 'error'].forEach(method => {
                        (console as any)[method] = (...args: any[]) => {
                            window.mcpHelper.logs.push(`[${method}] ${args.join(' ')}`);
                            (window.mcpHelper.originalConsole as any)[method](...args);
                        };
                    });
                });

                const result = await page.evaluate(args.script);

                const logs = await page.evaluate(() => {
                    Object.assign(console, window.mcpHelper.originalConsole);
                    const logs = window.mcpHelper.logs;
                    delete (window as any).mcpHelper;
                    return logs;
                });

                return {
                    content: [
                        {
                            type: "text",
                            text: `Execution result:\n${JSON.stringify(result, null, 2)}\n\nConsole output:\n${logs.join('\n')}`,
                        },
                    ],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Script execution failed: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }

        case "puppeteer_extract_images": {
            try {
                // Clear previous extracted images
                extractedImages.length = 0;

                // Extract images from <img> tags
                const imgImages = await page.evaluate((selector) => {
                    const imgElements = selector ?
                        document.querySelectorAll(`${selector} img`) :
                        document.querySelectorAll('img');

                    return Array.from(imgElements).map(img => ({
                        url: (img as HTMLImageElement).src,
                        alt: (img as HTMLImageElement).alt || '',
                        sourceType: 'img_tag'
                    }));
                }, args.selector || '');

                // Extract CSS background images if requested (default true)
                const includeBackgroundImages = args.includeBackgroundImages !== false;
                let cssImages: { url: string, sourceType: string }[] = [];

                if (includeBackgroundImages) {
                    cssImages = await page.evaluate((selector) => {
                        const elements = selector ?
                            document.querySelectorAll(selector) :
                            document.querySelectorAll('*');

                        const results: { url: string, sourceType: string }[] = [];

                        elements.forEach(element => {
                            const computedStyle = window.getComputedStyle(element);
                            const backgroundImage = computedStyle.backgroundImage;

                            if (backgroundImage && backgroundImage !== 'none') {
                                // Extract URL from the background-image CSS property
                                const urlMatches = backgroundImage.match(/url\(['"]?([^'"()]+)['"]?\)/g);

                                if (urlMatches) {
                                    urlMatches.forEach(urlMatch => {
                                        const url = urlMatch.replace(/url\(['"]?([^'"()]+)['"]?\)/, '$1');
                                        results.push({
                                            url: url,
                                            sourceType: 'css_background'
                                        });
                                    });
                                }
                            }
                        });

                        return results;
                    }, args.selector || '');
                }

                // Combine both types of images
                const allImages = [...imgImages, ...cssImages];

                // Convert relative URLs to absolute and deduplicate
                const pageUrl = page.url();
                const uniqueImageUrls = new Set<string>();

                allImages.forEach(image => {
                    let absoluteUrl = image.url;
                    // Handle relative URLs
                    if (!absoluteUrl.startsWith('http') && !absoluteUrl.startsWith('data:')) {
                        try {
                            absoluteUrl = new URL(image.url, pageUrl).href;
                        } catch (e) {
                            console.warn(`Failed to parse URL: ${image.url}`);
                            return;
                        }
                    }

                    // Skip data URLs for downloading (keep them for display)
                    if (!uniqueImageUrls.has(absoluteUrl)) {
                        uniqueImageUrls.add(absoluteUrl);
                        extractedImages.push({
                            ...image,
                            url: absoluteUrl
                        });
                    }
                });

                return {
                    content: [{
                        type: "text",
                        text: `Extracted ${extractedImages.length} images:\n${extractedImages.map((img, i) =>
                            `${i + 1}. [${img.sourceType}] ${img.url.substring(0, 100)}${img.url.length > 100 ? '...' : ''}`
                        ).join('\n')}`,
                    }],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Failed to extract images: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }
        }

        case "puppeteer_download_images": {
            try {
                const imageUrls = args.imageUrls || extractedImages.map(img => img.url);
                const outputFolder = args.outputFolder || './downloaded_images';
                const namePrefix = args.namePrefix || '';

                // Create the output directory if it doesn't exist
                if (!fs.existsSync(outputFolder)) {
                    fs.mkdirSync(outputFolder, { recursive: true });
                }

                const results: { url: string, path: string, success: boolean, error?: string }[] = [];

                // Download each image
                for (let i = 0; i < imageUrls.length; i++) {
                    const imageUrl = imageUrls[i];

                    // Skip data URLs
                    if (imageUrl.startsWith('data:')) {
                        results.push({
                            url: imageUrl.substring(0, 30) + '...',
                            path: '',
                            success: false,
                            error: 'Skipped data URL'
                        });
                        continue;
                    }

                    try {
                        // Generate a filename based on URL or index if URL parsing fails
                        let filename = '';
                        try {
                            const parsedUrl = new URL(imageUrl);
                            const urlPath = parsedUrl.pathname;
                            const urlFilename = path.basename(urlPath);
                            filename = urlFilename.replace(/[^a-zA-Z0-9\._-]/g, '_');

                            // Add extension if missing
                            if (!path.extname(filename)) {
                                filename += '.jpg'; // Default extension if unknown
                            }
                        } catch (e) {
                            filename = `image_${i + 1}.jpg`;
                        }

                        // Add prefix if provided
                        if (namePrefix) {
                            filename = `${namePrefix}_${filename}`;
                        }

                        const outputPath = path.join(outputFolder, filename);

                        // Download the image
                        const downloadResult = await downloadImage(imageUrl, outputPath);

                        results.push({
                            url: imageUrl,
                            path: outputPath,
                            success: downloadResult.success,
                            error: downloadResult.error
                        });
                    } catch (error) {
                        results.push({
                            url: imageUrl,
                            path: '',
                            success: false,
                            error: (error as Error).message
                        });
                    }
                }

                const successCount = results.filter(r => r.success).length;

                return {
                    content: [{
                        type: "text",
                        text: `Downloaded ${successCount}/${imageUrls.length} images to ${outputFolder}:\n${results.map((r, i) =>
                            `${i + 1}. ${r.url.substring(0, 50)}${r.url.length > 50 ? '...' : ''} -> ${r.success ? r.path : 'FAILED: ' + r.error}`
                        ).join('\n')}`,
                    }],
                    isError: false,
                };
            } catch (error) {
                return {
                    content: [{
                        type: "text",
                        text: `Failed to download images: ${(error as Error).message}`,
                    }],
                    isError: true,
                };
            }
        }

        default:
            return {
                content: [{
                    type: "text",
                    text: `Unknown tool: ${name}`,
                }],
                isError: true,
            };
    }
}

// Helper function to download an image from a URL
async function downloadImage(imageUrl: string, outputPath: string): Promise<{ success: boolean, error?: string }> {
    return new Promise((resolve) => {
        try {
            const parsedUrl = new URL(imageUrl);
            const protocol = parsedUrl.protocol === 'https:' ? https : http;

            const request = protocol.get(imageUrl, (response) => {
                // Handle redirects
                if (response.statusCode === 301 || response.statusCode === 302) {
                    const redirectUrl = response.headers.location;
                    if (redirectUrl) {
                        downloadImage(redirectUrl, outputPath)
                            .then(resolve)
                            .catch(() => resolve({ success: false, error: 'Redirect failed' }));
                        return;
                    }
                }

                // Check for successful response
                if (response.statusCode !== 200) {
                    resolve({ success: false, error: `HTTP status ${response.statusCode}` });
                    return;
                }

                // Create a file write stream
                const fileStream = fs.createWriteStream(outputPath);

                // Pipe the response to the file
                response.pipe(fileStream);

                // Handle completion
                fileStream.on('finish', () => {
                    fileStream.close();
                    resolve({ success: true });
                });

                // Handle errors
                fileStream.on('error', (err) => {
                    fs.unlink(outputPath, () => { });
                    resolve({ success: false, error: err.message });
                });
            });

            // Handle request errors
            request.on('error', (err) => {
                resolve({ success: false, error: err.message });
            });

            // Set timeout
            request.setTimeout(15000, () => {
                request.destroy();
                resolve({ success: false, error: 'Request timeout' });
            });
        } catch (error) {
            resolve({ success: false, error: (error as Error).message });
        }
    });
}

const server = new Server(
    {
        name: "example-servers/puppeteer",
        version: "0.1.0",
    },
    {
        capabilities: {
            resources: {},
            tools: {},
        },
    },
);


// Setup request handlers
server.setRequestHandler(ListResourcesRequestSchema, async () => ({
    resources: [
        {
            uri: "console://logs",
            mimeType: "text/plain",
            name: "Browser console logs",
        },
        ...Array.from(screenshots.keys()).map(name => ({
            uri: `screenshot://${name}`,
            mimeType: "image/png",
            name: `Screenshot: ${name}`,
        })),
    ],
}));

server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
    const uri = request.params.uri.toString();

    if (uri === "console://logs") {
        return {
            contents: [{
                uri,
                mimeType: "text/plain",
                text: consoleLogs.join("\n"),
            }],
        };
    }

    if (uri.startsWith("screenshot://")) {
        const name = uri.split("://")[1];
        const screenshot = screenshots.get(name);
        if (screenshot) {
            return {
                contents: [{
                    uri,
                    mimeType: "image/png",
                    blob: screenshot,
                }],
            };
        }
    }

    throw new Error(`Resource not found: ${uri}`);
});

server.setRequestHandler(ListToolsRequestSchema, async () => ({
    tools: TOOLS,
}));

server.setRequestHandler(CallToolRequestSchema, async (request) =>
    handleToolCall(request.params.name, request.params.arguments ?? {})
);

async function runServer() {
    const transport = new StdioServerTransport();
    await server.connect(transport);
}

runServer().catch(console.error);

process.stdin.on("close", () => {
    console.error("Puppeteer MCP Server closed");
    server.close();
});